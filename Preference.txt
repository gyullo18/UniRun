- 게임 매니저 만든다.
1. 점수 저장.
2. 게임오버 상태 표현.
3. 플레이어의 사망을 감지해 게임오버 처리 실행.
4. 점수에 따라 점수 UI텍스트 갱신.
5. 게임오버되었을 때 게임오버 UI 활성화.

위 부분 구현을 위해 "싱글턴 패턴" 사용.
What? "싱글턴패턴"?
1. 프로그램에 단 하나만 존재해야함.(단일 오브젝트)
2. 누구나 쉽게 언제 어디서든 즉시 접근 가능해야함. 

예를 들어 점수 저장 관리하는 기능이 2개 있다면 1점당 2번 실행되기 때문에
 2점씩 증가할 수 있다.
때문에 프로그램에 단 하나만 존재해야하는게 옳다. => “단일 오브젝트”

A B C 라는 사람이 있을경우 A의 사망여부를 C만 알면 B는 사망여부를 알 수 없다
이런 상황을 방지하기 위해 즉시 접근이 가능해야 한다.

이러한 개념을 가지고 있는게 싱글턴 패턴이다.

------------------------------------------------------------------------------------------------------------------------------------------------------
총정리
싱글턴 패턴 
1. 단일성
2 손쉬운 접근 (한정자 static 사용 : 정적)

# 중요 
public static GameManager instance; // 싱글턴을 할당할 전역 변수 - 인스턴스에 누구나 접근 가능.

private void Awake()
    {
        // 싱글턴 변수 instance가 비어있는가?
        if(instance == null)
        {
            // instance가 비어있다면 내 자신을 할당.
            instance = this; // this = 내 자신
        }
        else
        {
            // instance에 이미 다른 GameManager 오브젝트가 할당되어 있다면,
            // = 하나의 씬에 두개 이상의 GameManager 오브젝트가 존재한다는 의미.
            // > 싱글턴 오브젝트는 하나만 존재해야 하므로 자신의 게임 오브젝트를 파괴.
            Destroy(gameObject);
        }
    }
